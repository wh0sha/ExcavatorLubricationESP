#include <ESP8266WiFi.h>
#include <DallasTemperature.h>
#include <OneWire.h>
#include <ThingSpeak.h>
#include <UniversalTelegramBot.h>
#include <WiFiClientSecure.h>

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Wi-Fi
const char* ssid = "HONOR 200 Lite";
const char* password = "ilia123il";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ThingSpeak
const unsigned long channelID = 2935407;
const char* apiKey = "D5279UK7AQZ4E7P2";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
#define BOT_TOKEN "7783493729:AAHim-qxd3xoC1sGjpPDoDfNNNgN_V9Y7rI"
#define CHAT_ID "1039477265"

// –ü–∏–Ω—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
#define ONE_WIRE_BUS D2
#define VIBRATION_PIN D3
#define CURRENT_PIN A0
#define LED_PIN D0

// –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
const unsigned long CHECK_INTERVAL = 30000;
const unsigned long BOT_UPDATE_INTERVAL = 5000;

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature ds18b20(&oneWire);

WiFiClient client;
WiFiClientSecure secureClient;
UniversalTelegramBot bot(BOT_TOKEN, secureClient);

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
struct SystemState {
  bool needsLubrication = false;
  unsigned long lastLubricationTime = 0;
  unsigned long lastVibrationCheck = 0;
  unsigned long lastBotUpdate = 0;
  int vibrationCount = 0;
} systemState;

// –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π
float readDSTemperature();
void handleTelegramMessages();
void sendSensorData(String chat_id);
void sendHelp(String chat_id);
void sendStatus(String chat_id);
void updateKeyboard(String chat_id);

void setup() {
  Serial.begin(115200);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
  ds18b20.begin();
  pinMode(VIBRATION_PIN, INPUT);
  pinMode(LED_PIN, OUTPUT);
  pinMode(CURRENT_PIN, INPUT);
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi –ø–æ–¥–∫–ª—é—á–µ–Ω!");
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
  secureClient.setInsecure();
  bot.longPoll = 60;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ThingSpeak
  ThingSpeak.begin(client);
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  bot.sendMessage(CHAT_ID, "ü§ñ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–º–∞–∑–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞!", "");
  updateKeyboard(CHAT_ID);
}

void loop() {
  // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤
  float temperature = readDSTemperature();
  int current = analogRead(CURRENT_PIN);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏
  if (digitalRead(VIBRATION_PIN)) {
    systemState.vibrationCount++;
    delay(50);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (millis() - systemState.lastVibrationCheck >= CHECK_INTERVAL) {
    systemState.lastVibrationCheck = millis();
    systemState.vibrationCount = 0;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
  if (millis() - systemState.lastBotUpdate > BOT_UPDATE_INTERVAL) {
    handleTelegramMessages();
    systemState.lastBotUpdate = millis();
  }

  delay(100);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
void updateKeyboard(String chat_id) {
  String keyboardJson = "[[\"/help\", \"/data\", \"/status\"]]";
  bot.sendMessageWithReplyKeyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", "", keyboardJson, true);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
void handleTelegramMessages() {
  int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

  while (numNewMessages) {
    for (int i = 0; i < numNewMessages; i++) {
      String text = bot.messages[i].text;
      String chat_id = String(bot.messages[i].chat_id);
      
      if (text == "/start") {
        bot.sendMessage(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.", "");
        updateKeyboard(chat_id);
      }
      else if (text == "/help") {
        sendHelp(chat_id);
      }
      else if (text == "/data") {
        sendSensorData(chat_id);
      }
      else if (text == "/status") {
        sendStatus(chat_id);
      }
      else {
        bot.sendMessage(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help", "");
      }
    }
    numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  }
}
// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤
void sendSensorData(String chat_id) {
  float temp = readDSTemperature();
  int current = analogRead(CURRENT_PIN);
  
  String data = "üìä –î–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤:\n";
  data += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(temp) + "¬∞C\n";
  data += "‚ö° –¢–æ–∫: " + String(map(current, 0, 1023, 0, 100)) + "%\n";
  data += "üì≥ –í–∏–±—Ä–∞—Ü–∏–∏: " + String(systemState.vibrationCount) + "\n";
  bot.sendMessage(chat_id, data, "");
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
void sendHelp(String chat_id) {
  String help = "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "/data - —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤\n"
                "/status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã";
  bot.sendMessage(chat_id, help, "");
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
void sendStatus(String chat_id) {
  String status = "üì∂ –°–∏–≥–Ω–∞–ª WiFi: " + String(WiFi.RSSI()) + " dBm\n";
  status += "‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + String(millis() / 3600000) + " —á\n";
  status += "üõ¢ –°—Ç–∞—Ç—É—Å —Å–º–∞–∑–∫–∏: " + String(systemState.needsLubrication ? "–¢—Ä–µ–±—É–µ—Ç—Å—è" : "–ù–æ—Ä–º–∞");
  bot.sendMessage(chat_id, status, "");
}

// –ß—Ç–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
float readDSTemperature() {
  ds18b20.requestTemperatures();
  float temp = ds18b20.getTempCByIndex(0);
  return temp != -127.00 ? temp : 0;
}
